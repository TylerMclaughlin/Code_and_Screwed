

hush

d1 $ s "bd(3,8)"


setcps (93/60)

hush

d1 $ (whenmodWithin 8 0 3 (fast 2) . whenmodWithin 8 4 7 (hurry 2) ) $  slow 4 $ s "hh*8"-- "hh:1 hh hh:1 hh:3 hh:1 hh:2 hh:3 hh"

let wmW a b c = when (\t -> (t `mod` a) >= b &&  (t `mod` a)  < c)

hush

setcps (1.00*93/60)

resetCycles

do
  let asdf = slow 288 $ n "1 .. 288"
      p1 = "3 2 1 2"
      -- p2 = "4 4 2 4"
      p2 = "1 3 2 4"
      p3 = "4 2 3 1"
      p4 = "4 1 2 3"
      p = 8  -- 11
      q = 12  -- 15
  d1
  --    $ every 3 (slice 4 "1 4 2 2 1")
      -- $ fast 2 $ inside 2 (repeatCycles 2)
     -- $  inside 1 (repeatCycles 4)
     -- $ every' 32 16 (rotR 3)
     $ wmW 133 p q (slice 4 "1  1 2 3 4") -- 4 3 2 1 0"
     $ wmW 133 (16 + p) (16 + q) (slice 2 p1) -- 4 3 2 1 0"
     $ wmW 133 (32 + p) (32 + q) (slice 4 "2 1 4 1") -- 4 3 2 1 0"
     $ wmW 133 (48 + p) (48 + q) (slice 4  p1) -- 4 3 2 1 0"
     $ wmW 133 (64 + p) (64 + q) (slice 2  p2) -- 4 3 2 1 0"
     $ wmW 133 (80 + p) (80 + q) (slice 2  p3) -- 4 3 2 1 0"
     $ wmW 133 (96 + p) (96 + q) (slice 2  p2) -- 4 3 2 1 0"
     $ wmW 133 (112 + p) (112 + q) (slice 4  p4) -- 4 3 2 1 0"
     $ wmW 133 (128 + p) (128 + q) (slice 6  p4) -- 4 3 2 1 0"
     $ wmW 133 (136 ) (128 + q) (slice 4  " 1 2 1 3 2 3 4 3 4") -- 4 3 2 1 0"
     -- $ whenmodWithin 266 64 71 (slice 8 "3 2 1 2") -- 4 3 2 1 0"
     -- $ whenmodWithin 32 0 7 (every 4 (inside 2 (  repeatCycles 4)))
     -- $ whenmodWithin 32 16 23 (every 4 (inside 2 (  repeatCycles 4)))
     -- $ whenmodWithin 32 8 15 (juxBy 0.4 (hurry 2))
     $ stack [
       asdf # stack [
         s "mcwg" # cut 5,-- # speed 1.5,
         s "mcws" # cut 3
         ],
       asdf # stack [
         s "mcwx" # cut 4 ,-- # speed 1.5,
         s "mcwd" # cut 6
       ],
       -- striate 4 $ s "mcwv1" # cut 1,
       wmW 64 24 31 (slice 3 " 1 5 3 1")
       $ wmW 64 56 63 (slice 4 " 1 1 5 3 4")
      --  $ every 3 (slice 4 " 1 2")
       $ every 3 (slice 4 "1 2 3 2 4")
       $ every' 64 16 (rotR 3)
       $ every' 64 20 (rotR 2)
       $ asdf # stack [
       -- stack [
          s "mcwv1" # cut 1 # accelerate "<0 0 0 0 0 0.2>",
          s "mcwv2" # cut 2
        ]
     ] # unit "r"

hush

resetCycles

do
  let p = 3 --3 12
  d1
    -- $ whenmodWithin 64 p (p + 3) (slow 4 . euclid 5 16)
    -- $ whenmodWithin 64 (16 + p) (16 + p + 3)  (slow 2 . euclid 3 4)
    -- $ whenmodWithin 64 (32 + p) (32 + p + 3) (slow 4 . euclid 5 8)
    -- $ whenmodWithin 64 (48 + 0) (48 + 3) (slow 2 . euclid  5 6)
    $ whenmodWithin 64 (48 + p) (48 + p + 3) (trunc 0.75)
    $ whenmodWithin 64 p (p + 31) (fast 2)
    -- $ inside 1 (repeatCycles 5)
    $ slow 352  $ n "1 .. 352" # stack [
     -- s "rwm" # speed (slow 5 $ range 1 1.5 sine) # crush 4,
     s "rwm"  # crush 8,
     -- s "rwk"  # cut 3,
    --  s "rwh" # speed 0.5,
     -- s "rwp" ,
     s "rwp" # speed (slow 4 $ range 1 2 sine) ,
     -- s "rwb"
     -- s "rwb" # speed (slow 2 $ range 1 1.5 cosine) ,
     -- s "rwch" # speed "<0.5 1>" ,
     -- s "rwd" # coarse 4,
     -- s "rwv2" # speed 0.5 # cut 2,
      -- s "rwv1" # speed 0.5 # cut 1
     ] # unit "r" # shape 0.2 # room 0.2
     -- omg change "c to r"
