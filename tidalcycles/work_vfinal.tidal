

hush

d1 $ s "bd(3,8)"


setcps (92/60)

hush

0 `mod` 4

d1 $ whenmodWithin 8 0 3 (fast 2) $ whenmodWithin 8 4 7 (hurry 2) $ slow 4 $ s "bd hh cp hh bd hh sd hh"
d1 $ whenmodWithin 8 0 2 (fast 2) $ whenmodWithin 8 4 6 (hurry 2) $ slow 4 $ s "hh*8"-- "hh:1 hh hh:1 hh:3 hh:1 hh:2 hh:3 hh"

let whenmodWithin a b c = when (\t -> (t `mod` a) >= b &&  (t `mod` a)  <= c)
setcps (194/60)


hush

resetCycles

do
  let p = 3 --3 12
  d1
    -- $ whenmodWithin 64 p (p + 3) (slow 4 . euclid 5 16)
    -- $ whenmodWithin 64 (16 + p) (16 + p + 3)  (slow 2 . euclid 3 4)
    -- $ whenmodWithin 64 (32 + p) (32 + p + 3) (slow 4 . euclid 5 8)
    -- $ whenmodWithin 64 (48 + 0) (48 + 3) (slow 2 . euclid  5 6)
    $ whenmodWithin 64 (48 + p) (48 + p + 3) (trunc 0.75)
    $ whenmodWithin 64 p (p + 31) (fast 2)
    -- $ inside 1 (repeatCycles 5)
    $ slow 352  $ n "1 .. 352" # stack [
     -- s "rwm" # speed (slow 5 $ range 1 1.5 sine) # crush 4,
     s "rwm"  # crush 8,
     -- s "rwk"  # cut 3,
    --  s "rwh" # speed 0.5,
     -- s "rwp" ,
     s "rwp" # speed (slow 4 $ range 1 2 sine) ,
     -- s "rwb"
     -- s "rwb" # speed (slow 2 $ range 1 1.5 cosine) ,
     -- s "rwch" # speed "<0.5 1>" ,
     -- s "rwd" # coarse 4,
     -- s "rwv2" # speed 0.5 # cut 2,
      -- s "rwv1" # speed 0.5 # cut 1
     ] # unit "r" # shape 0.2 # room 0.2
     -- omg change "c to r"
